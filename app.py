import streamlit as st
import pandas as pd
from collaborative_recommend import recommend_products as recommend_collaborative
from content_based_recommendation import recommend_products as recommend_content_based

# ƒê∆∞·ªùng d·∫´n t·ªáp
CONTENT_BASED_DATA_FILE = "data/content_based_preprocessed.csv"
COLLABORATIVE_FULL_DATA_PART1 = "data/collaborative_full_data_part1.csv"
COLLABORATIVE_FULL_DATA_PART2 = "data/collaborative_full_data_part2.csv"
COLLABORATIVE_MODEL_FILE = "model/collaborative_model.pkl.gz"

# Set page configuration
st.set_page_config(
    page_title="Hasaki Recommendation System",
    page_icon="üíñ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Custom CSS for Hasaki-themed design
st.markdown("""
    <style>
    /* Overall page background */
    body {
        background-color: #f0f4f0;
        color: #2f6e51;
    }

    /* Sidebar styling */
    [data-testid="stSidebar"] {
        background-color: #e6f2e8;
        border-right: 2px solid #2f6e51;
    }

    /* Header and title styles */
    .header-title {
        color: #2f6e51;
        font-family: 'Arial', sans-serif;
        text-align: center;
        padding: 20px;
        background-color: #d0e5d3;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    /* Banner Styling */
    .banner {
        background: url('banner/hasaki_banner_2.jpg') no-repeat center center;
        background-size: cover;
        height: 150px; /* Adjust height as needed */
        display: flex;
        justify-content: center;
        align-items: center;
        color: white;
        font-size: 32px;
        font-weight: bold;
        text-shadow: 2px 2px 5px rgba(0,0,0,0.5);
    }

    /* Layout for product display */
    .product-layout {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        margin-top: 20px;
    }

    /* Style for product image */
    .product-image img {
        max-width: 100%;
        height: auto;
        border-radius: 10px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    }
    </style>
""", unsafe_allow_html=True)

# Hi·ªÉn th·ªã banner
banner_path = "banner/hasaki_banner.png"  # ƒê∆∞·ªùng d·∫´n c·ª•c b·ªô

st.image(
    banner_path,
    use_column_width=True,  # T·ª± ƒë·ªông cƒÉn ch·ªânh theo chi·ªÅu r·ªông c·ªßa trang
    caption=None  # Kh√¥ng hi·ªÉn th·ªã ch√∫ th√≠ch
)

# Sidebar th√¥ng tin nh√≥m
st.sidebar.title("Th√¥ng tin nh√≥m th·ª±c hi·ªán")
st.sidebar.write("""#### Th√†nh vi√™n th·ª±c hi·ªán:
- L√™ Qu·ª≥nh Minh Dung
- Nguy·ªÖn Th√πy Trang""")
st.sidebar.write("""#### Gi·∫£ng vi√™n h∆∞·ªõng d·∫´n: Khu·∫•t Th√πy Ph∆∞∆°ng""")
st.sidebar.write("""#### Th·ªùi gian th·ª±c hi·ªán: 12/2024""")

# Hi·ªÉn th·ªã ti√™u ƒë·ªÅ ch√≠nh
st.title("Hasaki g·ª£i √Ω s·∫£n ph·∫©m cho b·∫°n")

# Tabs ƒë·ªÉ ch·ªçn gi·ªØa hai ph∆∞∆°ng ph√°p g·ª£i √Ω
tab1, tab2 = st.tabs(["Content-Based Filtering", "Collaborative Filtering"])

# Tab 1: Content-Based Filtering
with tab1:
    st.subheader("Content-based filtering")

    # ƒê·ªçc d·ªØ li·ªáu s·∫£n ph·∫©m
    df_products = pd.read_csv(CONTENT_BASED_DATA_FILE)
    df_products['ten_san_pham'] = df_products['ten_san_pham'].astype(str).fillna('')
    df_products['ma_san_pham'] = df_products['ma_san_pham'].astype(str).fillna('')
    df_products['hinh_anh'] = df_products['hinh_anh'].astype(str).fillna("https://via.placeholder.com/150")

    # Ch·ªçn t√™n s·∫£n ph·∫©m
    product_names = df_products['ten_san_pham'].unique()
    selected_product_name = st.selectbox(
        "Nh·∫≠p ho·∫∑c ch·ªçn t√™n s·∫£n ph·∫©m y√™u th√≠ch:",
        options=[""] + list(product_names),
        format_func=lambda x: x if x else "Ch·ªçn s·∫£n ph·∫©m",
        key="product_name"
    )

    # L·ªçc s·∫£n ph·∫©m d·ª±a tr√™n l·ª±a ch·ªçn
    filtered_products = df_products[df_products['ten_san_pham'] == selected_product_name] if selected_product_name else pd.DataFrame()

    # Hi·ªÉn th·ªã s·∫£n ph·∫©m ƒë√£ ch·ªçn
    if not filtered_products.empty:
        selected_product_data = filtered_products.iloc[0]
        st.markdown("---")
        st.markdown(f"<h2 style='color: #2E8B57; text-align: center;'>{selected_product_data['ten_san_pham']}</h2>", unsafe_allow_html=True)
        
        # T·∫°o b·ªë c·ª•c hai c·ªôt
        col1, col2 = st.columns([1, 2])
        with col1:
            st.markdown('<div class="product-image">', unsafe_allow_html=True)
            st.image(selected_product_data['hinh_anh'], use_column_width=True)
            st.markdown('</div>', unsafe_allow_html=True)
        with col2:
            gia_ban = selected_product_data.get('gia_ban', 0)
            gia_goc = selected_product_data.get('gia_goc', 0)
            tab_info, tab_desc = st.tabs(["Th√¥ng tin chi ti·∫øt", "M√¥ t·∫£ s·∫£n ph·∫©m"])
            with tab_info:
                st.markdown(f"**M√£ s·∫£n ph·∫©m:** {selected_product_data['ma_san_pham']}")
                st.markdown(f"**Gi√° b√°n:** <span style='color: red;'>{gia_ban:,.0f} ‚Ç´</span>", unsafe_allow_html=True)
                st.markdown(f"<span style='text-decoration: line-through; color: gray;'>Gi√° g·ªëc: {gia_goc:,.0f} ‚Ç´</span>", unsafe_allow_html=True)
                st.markdown(f"**ƒêi·ªÉm ƒë√°nh gi√°:** {selected_product_data.get('diem_trung_binh', 'Kh√¥ng c√≥ th√¥ng tin')}")
            with tab_desc:
                st.markdown(selected_product_data.get('mo_ta', "Kh√¥ng c√≥ m√¥ t·∫£."))

        # G·ª£i √Ω s·∫£n ph·∫©m
        recommendations = recommend_content_based(
            product_id=selected_product_data['ma_san_pham'],
            df=df_products,
            weight_content=0.7,
            weight_rating=0.3,
            top_n=6
        )

        st.write("### S·∫£n ph·∫©m g·ª£i √Ω:")
        cols = st.columns(3)
        for idx, (_, row) in enumerate(recommendations.iterrows()):
            col = cols[idx % 3]
            with col:
                st.image(
                    row['hinh_anh'], 
                    caption=row['ten_san_pham'], 
                    use_column_width=False,  # T·∫Øt t·ª± ƒë·ªông cƒÉn ch·ªânh
                    width=350  # ƒê·∫∑t chi·ªÅu r·ªông c·ªë ƒë·ªãnh
                )
                st.markdown(f"**M√£ s·∫£n ph·∫©m:** <span style='color: blue;'>{row.get('ma_san_pham', 'Kh√¥ng c√≥ th√¥ng tin')}</span>", unsafe_allow_html=True)
                st.markdown(f"**Gi√° b√°n:** <span style='color: red;'>{row.get('gia_ban', 'Kh√¥ng c√≥ th√¥ng tin')} ‚Ç´</span>", unsafe_allow_html=True)
                st.markdown(f"<span style='text-decoration: line-through; color: gray;'>Gi√° g·ªëc: {row.get('gia_goc', 'Kh√¥ng c√≥ th√¥ng tin')} ‚Ç´</span>", unsafe_allow_html=True)
                st.markdown(f"**ƒêi·ªÉm ƒë√°nh gi√°:** {row.get('average_rating', 'Kh√¥ng c√≥ th√¥ng tin')}")
                with st.expander("Xem m√¥ t·∫£ s·∫£n ph·∫©m"):
                    st.write(row.get('mo_ta', "Kh√¥ng c√≥ m√¥ t·∫£."))
                st.markdown("---")

# Tab 2: Collaborative Filtering
with tab2:
    st.subheader("Collaborative filtering")

    @st.cache_data
    def load_customer_data(data_files):
        full_data = pd.concat([pd.read_csv(file) for file in data_files])
        full_data['ma_khach_hang'] = full_data['ma_khach_hang'].astype(str).str.strip()
        return full_data['ma_khach_hang'].unique()

    customer_ids = load_customer_data([COLLABORATIVE_FULL_DATA_PART1, COLLABORATIVE_FULL_DATA_PART2])

    # S·ª≠ d·ª•ng session_state ƒë·ªÉ l∆∞u tr·∫°ng th√°i t√™n v√† m√£ kh√°ch h√†ng
    if "customer_name" not in st.session_state:
        st.session_state.customer_name = ""
    if "customer_id" not in st.session_state:
        st.session_state.customer_id = ""

    # Nh·∫≠p th√¥ng tin kh√°ch h√†ng
    customer_name = st.text_input(
        "Nh·∫≠p t√™n c·ªßa b·∫°n:",
        value=st.session_state.customer_name
    ).strip()
    customer_id = st.selectbox(
        "Nh·∫≠p ho·∫∑c ch·ªçn m√£ kh√°ch h√†ng c·ªßa b·∫°n:",
        options=[""] + list(customer_ids),
        format_func=lambda x: f"M√£ kh√°ch h√†ng: {x}" if x else "",
        index=([""] + list(customer_ids)).index(st.session_state.customer_id) if st.session_state.customer_id in customer_ids else 0
    )

    # N√∫t ƒëƒÉng nh·∫≠p
    if st.button("ƒêƒÉng nh·∫≠p"):
        st.session_state.customer_name = customer_name  # L∆∞u t√™n v√†o session_state
        st.session_state.customer_id = customer_id     # L∆∞u m√£ v√†o session_state

    # Ch·ªâ hi·ªÉn th·ªã g·ª£i √Ω s·∫£n ph·∫©m khi ƒë√£ c√≥ th√¥ng tin
    if st.session_state.customer_name and st.session_state.customer_id:
        try:
            # Th·ª±c hi·ªán g·ª£i √Ω s·∫£n ph·∫©m
            recommendations = recommend_collaborative(
                [COLLABORATIVE_FULL_DATA_PART1, COLLABORATIVE_FULL_DATA_PART2],
                COLLABORATIVE_MODEL_FILE,
                st.session_state.customer_id,
                top_n=6
            )
            
            if not recommendations.empty:
                st.markdown(
                    f"### C√°c s·∫£n ph·∫©m g·ª£i √Ω d√†nh ri√™ng cho <span style='color:darkgreen; font-style:italic;'>{st.session_state.customer_name}</span>:",
                    unsafe_allow_html=True
                )
                
                # Hi·ªÉn th·ªã s·∫£n ph·∫©m g·ª£i √Ω
                cols = st.columns(3)  # Hi·ªÉn th·ªã l∆∞·ªõi 3 c·ªôt
                for idx, (_, row) in enumerate(recommendations.iterrows()):
                    col = cols[idx % 3]
                    with col:
                        st.image(row['hinh_anh'], use_column_width=True, caption=row['ten_san_pham'])
                        gia_ban = row.get('gia_ban', 0)
                        gia_goc = row.get('gia_goc', 0)
                        mo_ta = row.get('mo_ta', "Kh√¥ng c√≥ m√¥ t·∫£.")
                        st.markdown(f"**Gi√° b√°n:** {gia_ban:,.0f} ‚Ç´")
                        st.markdown(f"<span style='text-decoration: line-through; color: gray; font-size: 0.8em;'>Gi√° g·ªëc: {gia_goc:,.0f} ‚Ç´</span>", unsafe_allow_html=True)
                        st.write(f"**ƒêi·ªÉm ƒë√°nh gi√° trung b√¨nh:** {row['diem_trung_binh']:.2f}")
                        with st.expander("Xem m√¥ t·∫£ s·∫£n ph·∫©m"):
                            st.write(f"{mo_ta}")
                        st.markdown("---")
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m g·ª£i √Ω ph√π h·ª£p.")
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")
    elif st.session_state.customer_name and not st.session_state.customer_id:
        st.warning("Vui l√≤ng nh·∫≠p ho·∫∑c ch·ªçn m√£ kh√°ch h√†ng ƒë·ªÉ g·ª£i √Ω s·∫£n ph·∫©m!")
    elif not st.session_state.customer_name and st.session_state.customer_id:
        st.warning("Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n!")